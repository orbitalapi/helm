#use this to override the namespace other than the helm release
namespace: ""

fullnameOverride: ""

orbital:
  env:
    - name: VYNE_DB_USERNAME
      value: orbital
    - name: VYNE_DB_PASSWORD
      value: orbital
#      secretKeyRef:
#        key: dbpassword
#        name: orbitalcredentials
#    - name: VYNE_DB_HOST
#      value:

  security:
    enabled: false
    jwksUri: ""
    issuerUrl: ""
    clientId: ""
    scope: "openid"
    requireHttps: true

  persistRemoteCallResponses: true
  project:
    enabled: true
    path: /opt/service/config/taxi.conf
  workspace:
    enabled: false
    path: /opt/service/config/workspaces.conf
  additionalConfig:
    taxiConfig: |-
      name: com.foo/test
      version: 0.1.0
      sourceRoot: src/
      additionalSources: {
          "@orbital/config": "conf/*.conf"
        }
#    workspacesConfig: |-
#      git {
#        pollFrequency=PT20S
#        repositories=[ {
#          branch=main
#          name=orbital-demo
#          uri=""
#      } ] }

  image:
    repository: orbitalhq/orbital
    tag: "latest"
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  deploymentAnnotations: {}
  updateStrategy: {}
  #    type: RollingUpdate
  #    rollingUpdate:
  #      maxSurge: "100%"
  #      maxUnavailable: "0%"
  #deploymentMinReadySeconds: 60
  serviceMonitor:
    enabled: false

  serviceAccount:
    create: true
    # Automount the service account token. By default, this is disabled, and the token is only mounted on the controller
    # container. Some sidecars require enabling this.
    automountServiceAccountToken: false
  ## Optionally specify the name of the service account to create and the annotations to add.
  #  name:
  #  annotations: {}

  service:
    enabled: true
    type: NodePort
    servicePort: 9022
    containerPort: 9022
    # Set a node port which is available if service type is NodePort
    # nodePort: 32080
    # Set a host port
    # hostPort:

  ingress:
    # Enable/disable exposure using ingress.
    enabled: false
    ingressClassName:
    # TLS secret name.
    # tls: kong-manager.example.com-tls
    # Ingress hostname
    hostname:
    # Map of ingress annotations.
    annotations: {}
    # Ingress path.
    path: /
    # Each path in an Ingress is required to have a corresponding path type. (ImplementationSpecific/Exact/Prefix)
    pathType: ImplementationSpecific

  hostNetwork: false
  priorityClassName: ""
  hostAliases: {}
#  - ip: "127.0.0.1"
#    hostnames:
#    - "foo.local"
#    - "bar.local"
## Optional DNS configuration
#  dnsPolicy: ClusterFirst
#  dnsConfig:
#    nameservers:
#    - "10.100.0.10"
#    options:
#    - name: ndots
#      value: "5"
#    searches:
#    - default.svc.cluster.local
#    - svc.cluster.local
#    - cluster.local
#    - us-east-1.compute.internal

  podLabels: {}
  podAnnotations: {}
  replicaCount: 1
  terminationGracePeriodSeconds: 30
  # Enable autoscaling using HorizontalPodAutoscaler
  # When configuring an HPA, you must set resource requests on all containers via
  # "resources" if this is enabled, replica count above is ignored
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    behavior: {}
    ## targetCPUUtilizationPercentage only used if the cluster doesn't support autoscaling/v2 or autoscaling/v2beta
    targetCPUUtilizationPercentage:
    ## Otherwise for clusters that do support autoscaling/v2 or autoscaling/v2beta, use metrics
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80

  podDisruptionBudget:
    enabled: false
    # Uncomment only one of the following when enabled is set to true
    # maxUnavailable: "50%"
    # minAvailable: "50%"

  readinessProbe:
    httpGet:
      path: "/api/actuator/health"
      port: 9022
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  livenessProbe:
    httpGet:
      path: "/api/actuator/health"
      port: 9022
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3

  # securityContext for orbital pods.
  securityContext: {}

  # securityContext for containers.
  containerSecurityContext: {}

  # Orbital container lifecycle hooks
  # Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  lifecycle: {}

  resources: {}
#    limits:
#      memory: 2G
#    requests:
#      cpu: 1
#      memory: 2G

  # Affinity for pod assignment
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  # Topology spread constraints for pod assignment (requires Kubernetes >= 1.19)
  # Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints: []

  # Tolerations for pod assignment
  # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # Node labels for pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

streamServer:
  image:
    repository: orbitalhq/stream-server
    tag: "latest"
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  serviceMonitor:
    enabled: false

  deploymentAnnotations: {}
  updateStrategy: {}
#    type: RollingUpdate
#    rollingUpdate:
#      maxSurge: "100%"
#      maxUnavailable: "0%"
  #deploymentMinReadySeconds: 60
  service:
    enabled: true
    type: NodePort
    servicePort: 9615
    containerPort: 9615
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Set a host port
    # hostPort:

  podLabels: {}
  podAnnotations: {}
  replicaCount: 1
  terminationGracePeriodSeconds: 30
  # Enable autoscaling using HorizontalPodAutoscaler
  # When configuring an HPA, you must set resource requests on all containers via
  # "resources" if this is enabled, replica count above is ignored
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    behavior: {}
    ## targetCPUUtilizationPercentage only used if the cluster doesn't support autoscaling/v2 or autoscaling/v2beta
    targetCPUUtilizationPercentage:
    ## Otherwise for clusters that do support autoscaling/v2 or autoscaling/v2beta, use metrics
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80

  podDisruptionBudget:
    enabled: false
    # Uncomment only one of the following when enabled is set to true
    # maxUnavailable: "50%"
    # minAvailable: "50%"

  readinessProbe:
    httpGet:
      path: "/api/actuator/health"
      port: 9615
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  livenessProbe:
    httpGet:
      path: "/api/actuator/health"
      port: 9615
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3

  # securityContext for stream server pods.
  securityContext: {}

  # securityContext for stream server container.
  containerSecurityContext: {}

  # Orbital stream server container lifecycle hooks
  # Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  lifecycle: {}

  resources: {}
#    limits:
#      memory: 2G
#    requests:
#      cpu: 1
#      memory: 2G

  # Affinity for pod assignment
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  # Topology spread constraints for pod assignment (requires Kubernetes >= 1.19)
  # Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints: []

  # Tolerations for pod assignment
  # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: [ ]

  # Node labels for pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: { }

postgresql:
  enabled: true
  auth:
    username: orbital
    database: orbital
    password: orbital
