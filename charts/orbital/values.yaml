fullnameOverride: ""

# set the version of Orbital to deploy (orbital)
# Defaults to the chart appVersion
version: ""

orbital:
  streamServer:
    enabled: false
  #set env variables in pod
  env: []

  #allows linking of secrets and config maps created outside of chart
  envFrom: []

  #allows creating of config and injecting into envFrom
  config: {}

  #allows creating of secret and injecting into envFrom
  secretConfig: {}

  #creates a secret for storing the DB credentials and injects into envFrom
  dbSecretConfig: {}

  security:
    enabled: false

    clientId: ""
    # This url is called by Orbitalâ€™s server, so ensure that the DNS entry is accessible to Orbital
    jwksUri: ""
    #normally only 1 of issuerUrl and oidcDiscoveryUrl needs to be set not both
    issuerUrl: ""
    #if this is not set will default to ${issuerUrl}/.well-known/openid-configuration
    oidcDiscoveryUrl: ""

    scope: "openid"
    requireHttps: true

    # Optional
    accountManagementUrl: ""
    # Optional
    orgManagementUrl: ""
    # Optional
    identityTokenKind: "" #Values are Access or Id
    # Optional - only needed for Azure AD with value of path
    rolesFormat: ""
    # Optional - only needed for Azure AD with value of roles
    rolesPath: ""

  persistRemoteCallResponses: true
  project:
    enabled: true
    path: /opt/service/config/taxi.conf
    config: |-
      name: com.foo/test
      version: 0.1.0
      sourceRoot: src/
      additionalSources: {
          "@orbital/config": "conf/*.conf"
        }
  workspace:
    enabled: false
    path: /opt/service/config/workspace/workspaces.conf
    configSuppliedAsConfigMap: false
    configMap: "" #right now only 1 config map is allowed for workspace config
    config: |-
      git {
       # The root directory where all git repositories are cloned to
       checkoutRoot="/workspace/gitProjects"
      
       # How frequently Orbital should poll git repositories for changes
       pollFrequency=PT20S

       # A collection of Git Repository configurations
       repositories=[]
      }

  image:
    repository: orbitalhq/orbital
    # Defaults to the chart appVersion
    tag: ""
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  deploymentAnnotations: {}
  updateStrategy: {}
  #    type: RollingUpdate
  #    rollingUpdate:
  #      maxSurge: "100%"
  #      maxUnavailable: "0%"
  #deploymentMinReadySeconds: 60

  serviceAccount:
    create: true
    # Automount the service account token. By default, this is disabled, and the token is only mounted on the controller
    # container. Some sidecars require enabling this.
    automountServiceAccountToken: false
  ## Optionally specify the name of the service account to create and the annotations to add.
  #  name:
  #  annotations: {}

  service:
    enabled: true
    type: ClusterIP
    servicePort: 9022
    containerPort: 9022
    # Set a node port which is available if service type is NodePort
    # nodePort: 32080
    # Set a host port
    # hostPort:
    loadBalancerIP: ""
    loadBalancerClass: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: "Cluster"
    annotations: {}

    # allows to pass through additional service parameters not defined above
    supplemental:
      externalIPs: []

  ingress:
    # Enable/disable exposure using ingress.
    enabled: false
    ingressClassName:
    # TLS secret name.
    # tls: kong-manager.example.com-tls
    # Ingress hostname
    hostname:
    # Map of ingress annotations.
    annotations: {}
    # Ingress path.
    path: /
    # Each path in an Ingress is required to have a corresponding path type. (ImplementationSpecific/Exact/Prefix)
    pathType: ImplementationSpecific

  hostNetwork: false
  priorityClassName: ""
  hostAliases: {}
#  - ip: "127.0.0.1"
#    hostnames:
#    - "foo.local"
#    - "bar.local"
## Optional DNS configuration
#  dnsPolicy: ClusterFirst
#  dnsConfig:
#    nameservers:
#    - "10.100.0.10"
#    options:
#    - name: ndots
#      value: "5"
#    searches:
#    - default.svc.cluster.local
#    - svc.cluster.local
#    - cluster.local
#    - us-east-1.compute.internal

  podLabels: {}
  podAnnotations: {}
  replicaCount: 1
  terminationGracePeriodSeconds: 30
  # Enable autoscaling using HorizontalPodAutoscaler
  # When configuring an HPA, you must set resource requests on all containers via
  # "resources" if this is enabled, replica count above is ignored
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    behavior: {}
    ## targetCPUUtilizationPercentage only used if the cluster doesn't support autoscaling/v2 or autoscaling/v2beta
    targetCPUUtilizationPercentage:
    ## Otherwise for clusters that do support autoscaling/v2 or autoscaling/v2beta, use metrics
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80

  podDisruptionBudget:
    enabled: false
    # Uncomment only one of the following when enabled is set to true
    # maxUnavailable: "50%"
    # minAvailable: "50%"

  readinessProbe:
    httpGet:
      path: "/api/actuator/health"
      port: 9022
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  livenessProbe:
    httpGet:
      path: "/api/actuator/health"
      port: 9022
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  startupProbe:
    httpGet:
      path: "/api/actuator/health"
      port: 9022
      scheme: HTTP
    initialDelaySeconds: 1
    timeoutSeconds: 3
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 12

  # securityContext for orbital pods.
  securityContext: {}

  # securityContext for containers.
  containerSecurityContext: {}
#    capabilities:
#      drop:
#        - all
#    readOnlyRootFilesystem: true
#    runAsNonRoot: true
#    runAsUser: 1000
#    runAsGroup: 1000

  # Orbital container lifecycle hooks
  # Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  lifecycle: {}

  resources:
    limits:
      memory: 1.5Gi
    requests:
      cpu: 1.5
      memory: 1.5Gi

  # Affinity for pod assignment
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  # Topology spread constraints for pod assignment (requires Kubernetes >= 1.19)
  # Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule

  # Tolerations for pod assignment
  # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # Node labels for pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

postgresql:
  enabled: false
  auth:
    username: orbital
    database: orbital
    password: orbital

#enable prometheus install
prometheus:
  enabled: false

  #Set the URL for prometheus if it's in another namespace/cluster/deployment
  #if left blank and prometheus enabled above will use default name for prometheus
  serviceUrl: ""

#this parameter enables the service monitor resources for orbital
serviceMonitor:
  enabled: false

# prometheus operator sub chart configurations
kube-prometheus-stack:
  crds:
    enabled: true
  prometheusOperator:
    enabled: true
  prometheus:
    enabled: true
  defaultRules:
    create: false
  windowsMonitoring:
    enabled: false
  alertmanager:
    enabled: false
  grafana:
    enabled: false
  kubernetesServiceMonitors:
    enabled: false
  kubeApiServer:
    enabled: false
  kubelet:
    enabled: false
  kubeControllerManager:
    enabled: false
  coreDns:
    enabled: false
  kubeDns:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  thanosRuler:
    enabled: false

###############################################################################
# Extra Objects
###############################################################################

# Additional Kubernetes objects you would like to deploy alongside Orbital.
# E.g.
# extraObjects:
#   - apiVersion: networking.istio.io/v1beta1
#     kind: VirtualService
#     metadata:
#       name: my-virtual-service
#     spec:
#       hosts:
#         - "*"
#       gateways:
#         - istio-system/ingress-gateway
#       http:
#         - match:
#             - uri:
#                 prefix: /something
#           rewrite:
#             uri: "/something-else"
extraObjects: []

## Define any volumes and mounts you want present in the Kong proxy container
# userDefinedVolumes:
# - name: "volumeName"
#   emptyDir: {}
# userDefinedVolumeMounts:
# - name: "volumeName"
#   mountPath: "/opt/user/dir/mount"
